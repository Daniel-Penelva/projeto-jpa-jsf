Link do projeto:
http://localhost:8080/projeto-jpa-jsf/index.jsf
http://localhost:8080/projeto-jpa-jsf/primefaces.jsf

MAPEAMENTO OBJETO RELACIONAL (ORM)

Pode-se trabalhar com apenas o JPA ou com o JPA e o Hibernate.

O Hibernate abstrai o seu código SQL, toda a camada JDBC e o SQL será gerado em tempo de execução.


    @Entity            AUTOMATIZA PROCESSOS          SQL
  Classe Usuário   ----------------------------> Tabela Usuário
    [JAVA]                                          [TABELA]

LINGUAGEM HQL
O Hibernate vem com uma poderosa linguagem de consulta (HQL) que é muito parecida com o SQL. No entanto, comparado com 
o SQL o HQL é totalmente orientado à objetos, e compreende noções de herança, polimorfismo e associações.

Criar um projeto Maven (OBS. Não esquecer de configurar o java compiler e BuildPath com o JDK da sua máquina instalado - Clica com o botão 
direito do mouse em cima do projeto, vai em properties e procure as abas de configuração dita acima). 

Vou adiicionar as dependencias do junit, do postgresql (version 9.5) e o hibernate/jpa.

IMPORTANTE!!! Temos que criar um arquivo de persistence.xml do JPA, e para fazer isso, vai com o botão direito do 
mouse em cima do projeto e clica em 'porperties' depois vai em 'Project Facets' e clica em 'Convert to Faceted form...' 
e marque a opção 'JPA'. Depois procure a aba 'Runtimes' e coloque o jdk que está instalado e por fim 'apply and close'.

É nesse arquivo, persistence.xml, que irá configurar toda a comunicação com o banco de dados.

----------------------------------------------------------------//----------------------------------------------------------------

Configurando as propriedades do arquivo persistence.xml para a comunicação com o banco de dados.

1 - O nome do Driver do banco de dados no caso postgresql
<property name="hibernate.connection.driver_class" value="org.postgresql.Driver"/>

2 - Endereço (url) para criar o banco de dados cujo nome vai ser projetoJpaHibernate
<property name="hibernate.connection.url" value="jdbc:postgresql://localhost:5432/projetoJpaHibernate"/>
OBS. Não esquece de criar o banco de dados 'projetoJpaHibernate' no postgresql

3 - Para o hibernate manipular a parte de mapeamento de objeto relacional vai ser preciso dizer o tipo de dialeto usado
<property name="hibernate.dialect" value="org.hibernate.dialect.PostgreSQLDialect"/>

4 - O nome do usuário do banco de dados
<property name="hibernate.connection.username" value="postgres"/>

5 - Senha (password) do banco de dados
<property name="hibernate.connection.password" value="admin"/>

6 - Propriedade que ajuda a atualizar automaticamente as manipulações feitas no banco de dados
    (Por exemplo, criar automaticamente as tabelas no banco de dados) 
<property name="hibernate.hbm2ddl.auto" value="update"/>

----------------------------------------------------------------//----------------------------------------------------------------

A classe HibernateUtil vai ser chamada para quando o projeto subir ou para quando fazer alguma manipulação no 
banco de dados. Vai ser essa classe que irá ler o arquivo persistence.xml, deixando instanciada a conexão com o BD.

<version>5.2.6.Final</version>

----------------------------------------------------------------//----------------------------------------------------------------

É preciso declarar o arquivo de entidade para a persistencia no banco de dados. Essa declaração é a tag class
e o seu valor é o caminho dessa entidade. Essa declaração é feito no arquivo persistence.xml.
Ex: <class>br.com.projetoJpaHibernate.model.UsuarioPessoa</class>

----------------------------------------------------------------//----------------------------------------------------------------

Os métodos tem o objetivo de garantir que quem instanciar o DaoGeneric vai ter que ser passado como parâmetro 
um EntityManager. Portanto, já podemos dizer que toda vez que for instanciado um DAO logo será passado para 
ele um EntityManager. 

Partindo do ponto que foi instanciado um DAO e podendo ser fornecido para ele um EntityManager, logo 
poderemos fazer todas as funcionalidades como cadastrar, alterar, remover e buscar, e essas funcionalidades 
serão encapsuladas pelo Hibernate dentro de métodos como:

  --> persist() = persiste no banco de dados.
  
  --> merge() = Este método é inteligente, pois se o objeto Usuario existir a propriedade id vai tentar 
                fazer um update e se ele não existir uma propriedade id vai fazer um insert, o próprio 
                EntityManager vai resolver isso automaticamente. Portanto, logo não vamos mais precisar 
                dos métodos cadastrar e alterar bastará apenas o método salvar para ele fazer as funções 
                do update (alterar) e do insert (inserir).
  
  --> find(Classe.class, id) = Para busca vamos usar a seguinte expressão “Classe.class” para utilizar a 
                               Classe que deseja buscar como parâmetro e o “id” para utilizar a propriedade 
                               id como parâmetro. Automaticamente a funcionalidade find vai fazer a busca 
                               do objeto pelo id. Vai buscar apenas um valor de objeto.

                               
  -->  	Para buscar todos os valores, ou seja, uma consulta com mais de um valor, precisaremos manipular 
uma linguagem JPQL que é exclusiva do JPA, vamos manipular através de uma Query (Classe persistence). 
Exemplo pode existir um universo de entity (entidades) e cada entity está vinculado com uma tabela do 
banco de dados, e esses entity podem estar relacionados entre si e assim como também na tabela, eles podem 
estar relacionados entre si. Podemos dizer que existi uma relação entre o Objeto Cidade e o Objeto Estado, 
e essa relação tem uma multiplicidade de um para muitos, ou seja, um Estado pode ter muitas Cidades, 
portanto, posso confirmar que um Estado está vinculado com muitas Cidades, como também posso dizer que um 
registro da tabela Estado está vinculado com mais de um registro da tabela Cidade (pensamento em banco de dados). 
Logo, como iremos fazer as consultas neste universo de entity? No caso dos registros entre o Estado e a Cidade é 
fácil, pois podemos usar SQL, mas no mundo do JPA temos o JPQL que é a linguagem SQL das entidades, ou seja, você 
não vai mais fazer as consultas em torno do banco de dados, agora você vai fazer as consultas em torno das entidades. Vamos inserir a JPQL dentro de um objeto Usuário e o resultado desta consulta vai trazer uma coleção de objetos usuários, para cada usuário que existi no banco de dados vamos obter um registro dessa tabela.  

OBS: Linguagem HPL é uma linguagem mais especifica para o Hibernate para consulta de registro no banco de dados.

Linguagem JPQL é uma linguagem especifica para qualquer framework JPA.

Exemplo:O SQL faz consultas da seguinte maneira:  | Exemplo:O JPQL faz consultas da seguinte maneira:
Select * From usuario;                            | Select u From Usuario u;

                                                    “u” representa todos os campos do objeto u.
                                                    Usuario é o nome da Classe (com letra maiúscula).
                                                    “u” representa a instancia da Classe Usuário.

----------------------------------------------------------------//----------------------------------------------------------------

Named Query é usada para queryes específicas. Essas queryes são adicionadas no arquivo de entidade.

----------------------------------------------------------------//----------------------------------------------------------------

Para o relacionamento entre as entidades é preciso mapear para ambos os relacionamentos.

Para a entidade TelefoneUsuarioPessoa:

   @ManyToOne(optional = false, fetch = FetchType.EAGER)
   private UsuarioPessoa usuarioPessoa;
   
Para a entidade UsuarioPessoa:

   @OneToMany(mappedBy = "usuarioPessoa", fetch = FetchType.EAGER)
   private List<TelefoneUsuarioPesssoa> telefones;

OBS. fetch = FetchType.EAGER --> Para poder consultar, ou seja, trazer numma lista os dados do usuário e do telefone

Modelo Relacional

UsuarioPessoa(id, nome, sobrenome, email, login, senha, idade)
id referencia ao UsuarioPessoa.

TelefoneUsuarioPessoa(id, tipo, numero, usuarioPessoa)
id referencia TelefoneUsuarioPessoa
usuarioPessoa referencia UsuarioPessoa(id)

----------------------------------------------------------------//----------------------------------------------------------------

JSF é um MVC (MODEL-VIEW-CONTROLLER)



                             CONTROLLER            VIEW                                MODEL
                          
 CLIENTES -------------->  (Manager Beans)  +  (Páginas JSF) --------------> (entidades e regras de negócio)
          <-------------   (Faces Servlet)       (XHTML)     <-------------

O Controller intercepta os dados da tela que é jogado no Model. Ele também buscas os dados que estão no Model que é jogado para a View (tela).


Principais Componentes do JSF - SITE: https://www.tutorialspoint.com/jsf/index.htm

ShowCase Primefaces - SITE: https://www.primefaces.org/showcase/index.xhtml?jfwid=1aeba

Site oficial javaserverfaces - SITE: https://javaee.github.io/javaserverfaces-spec/

Bibliotecas de terceiros que trabalham com JSF - SITE: http://icefaces-showcase.icesoft.org/showcase.jsf
                                                 SITE: http://showcase.richfaces.org/


< Aula 24.11 - Ensina a configurar o ambiente e a criar o primeiro projeto jsf >
< Aula 24.17 - Ensina a corrigir erros de biblioteca e de java compiler (em relação ao jdk) >

O projeto Maven criado talvez não apareça para o servidor tomcat, o que signfica que o seu projeto não é um projeto web. Logo,temos que 
tornar esse projeto como web. E como fazer isso?

Clica no projeto e com o botão direito do mouse > properties > Projects Facets > Clica em "Convert to faceted form..." > Habilitar 'Dynamic Web Module', 'Javascript, 'JavaServer Faces' e 'JPA' > apply
Clica no projeto e com o botão direito do mouse > properties > Projects Facets > na aba 'Runtimes' define o tomcat que vai ser utilizado > apply
OBS. Se aparecer um "x em vermelho" clica nesse x e em 'JPA implemention' escolhe o type 'Disable Library Configuration' > next > marca o 'Generate web.xml deployment descriptor' > next > ok

OBS. No eclipse a aba 'Markers' foi mostrado erro de java compiler, ou seja, era um erro de jdk que não estava compativel com o projeto. No caso, alterei 
para o JDK que estou usando nos projetos.

----------------------------------------------------------------//----------------------------------------------------------------

Entendendo o ManagedBean JSF

    Front-end            ------------->  Back-end
   (Página JSF - XHTML)  <-------------  (ManagedBean - Controlador)
   

O JSF terá a página de view (tela) que vai ser criada com um conjunto de tags especiais que vai ser comunicar com o servlet.
 
Vai ser preciso criar os managedbean que é um objeto controlado pelo JSF que por conseqüência vai saber como se comunicar 
com o Servlet e com as tags especiais vinda da tela, ou seja, o managedbean ao ser criado vai ser o responsável por controlar
a página. Lembrando que ele vai ser o back-end  que são os eventos da página (por exemplo, um evento de cadastro). 
Portanto, primeiro lá no Servlet vai ter a anotação “@Controller” onde vai ser possível fazer a instância do objeto que vai
cumprir com o papel de intermediador do managedbean e com o framework Spring.

Vale ressaltar, que a primeiro momento ele vai trabahar com o JSF, logo ele usará a anotação “@ManagedBean” para 
capturar os dados da tela no momento que o usuário executar o botão, esses dados referente ao usuário vão ser capturados 
pelo servlet e vai passar para o seu “@ManagedBean”, logo todos os dados que estavam na tela vão ser armazenados num objeto
da entidade (camada model), onde vai ser setado por ele todos os dados. 

OBS. No arquivo web.xml na pasta WEB-INF, a tag servlet-class é onde está a classe principal do funcionamento do JSF.
OBS. E a tag url-pattern é onde define os mapeamentos da url(s).

Ao criar a página XHTML vai ser preciso adicionar a anotação do JSF na página. E vai ser usado como referencia a letra h 
para o namespace. EX: xmlns:h="http://java.sun.com/jsf/html". 
Esse xml namespace vai ser puxado do próprio framework onde estão as bibliotecas (dependencias) baixadas no Maven do seu projeto.

----------------------------------------------------------------//----------------------------------------------------------------
Escopos do Managed Beans

Quando referenciamos um managed bean via EL (Expression language, por exemplo: value="#{usuarioPessoa.nome}"),
o framework do JSF instanciará um objeto da classe managed bean, ou recuperará uma instância existente. Todas 
as instâncias possuem um tempo de vida (ciclo de vida), que é definido dependendo do escopo usado no managed bean.

Os escopos de managed beans JSF podem ser definidos através de anotações do pacote javax.faces.bean.

Objetivo: Define comportamentos para telas e sistemas e cada escopo resolve um tipo de problema e cada um 
tem sua função específica. 

----------------------------------------------------------------//----------------------------------------------------------------

Principais Escopos:

@NoneScoped
O bean será instanciado a cada vez que for referenciado.

@RequestScope (padrão)
Tem vida curta, começando quando é referenciado em uma única requisição HTTP e terminando quando a resposta é 
enviada de volta ao cliente.

@ViewScope 
A instância permanece ativa até que o usário navegue para uma próxima página.

@SessionScoped
Mantém a instância durante diversas requisições e até mesmo navegações entre páginas, até que a sessão do 
usuário seja invalidada ou o tempo limite é atingido. Cada usuário possui uma sessão de navegação, portanto, os 
objetos não são compartilhados entre os usuários.

@ApplicationScoped
Mantém a instância durante todo o tempo de execução da aplicação. É um escopo que compartilha os objetos para 
todos os usuários do sistema.

----------------------------------------------------------------//----------------------------------------------------------------

Bom saber sobre Request Scoped: 
Em relação ao Request Scoped, ao clicar no botão 'adicionar nome', ele chama uma requisição, no caso, o método 
addNome e adiciona o nome na lista e quando o servidor dá a resposta para o navegador o bean Pessoa (pessoaBean) 
que estava na memória morre (portanto, ao gerar uma requisição ele processo o maneged bean, devolve a resposta, e morre), 
ou seja, tudo que estiver dentro dele vai morrer também, no caso, o usuário adicionado a lista. Por esse motivo que
não é possível usar o request Scoped numa lista já que sempre que for adicionado um usuário ele morre e não vai ser 
possível adicionar outro usuário. Portanto, o Request Scoped só é recomendado usar num cadastro, ou seja, capturou
os dados da tela de cadastro, salvou no banco de dados e por fim morreu.

----------------------------------------------------------------//----------------------------------------------------------------

Bom saber sobre View Scoped: 
Enquanto estiver com a tela 'primeirapagina.xhtml' aberta, independente do que estiver na tela (exemplo um formulario de cadastro)
o maneged bean vai manter esse estado de ativo, ou seja, vai continuar mantendo os dados na tela. Portanto, o que 
vai fazendo na tela vai guardando os dados.
Logo, ele só morre, se por exemplo, redirecionar a tela para outra página.

----------------------------------------------------------------//----------------------------------------------------------------

Bom saber sobre Session Scoped: 
Usado para usuários logados. A sessão é mantida enquanto o navegador continuar aberto pelo usuário.
Acesse o link do seu projeto cadastre alguns nomes e depois submeta esse mesmo link em outra aba do seu navegador, 
você verá que manterá os nomes ainda cadastrados.

----------------------------------------------------------------//----------------------------------------------------------------

Bom saber sobre Application Scoped: 
Significa que todos os usuário irão poder compartilhar esses dados, até os que não teriam permissão de visualizar a 
informação dos dados. É compartilhado em todas as aplicações.

----------------------------------------------------------------//----------------------------------------------------------------

Managed Bean: É qualquer bean cuja vida é gerenciada pelo Faces.

Backing Bean: Como diz o nome, é um “Bean por detrás”, um “Bean que dá suporte”. Ou seja, é o Bean que está por trás da funcionalidade
de uma página, cuidando dos seus componentes, do estado da página, da navegação, etc. Costuma ser intimamente associado a 
alguma página.
Todo backing-bean também é um managed bean, mas nem todo managed bean é um backing-bean. Pode ser um objeto de negócio, por exemplo.

Backing Bean (são maneged bean) trabalha com os componentes jsf junto com o objeto, ou seja, todos os componentes xhtml 
que estiver terá a respectiva classe do java. É possivel trabalhar com os componentes no back-end. Mas essa pratica não 
é recomendada.

----------------------------------------------------------------//----------------------------------------------------------------

A navegação explicita é feito dentro do arquivo faces-config.xml

----------------------------------------------------------------//----------------------------------------------------------------

Vale ressaltar que o atributo 'value' da dataTable corresponde que os dados virão de uma lista. E essa lista vai ser 
carregada no managed bean. Lembrando que vamos criar um objeto do Classe List do tipo UsuarioPessoa e usar o seu 
método getters para injetar os dados da tela para dentro do objeto. Vamos capturar o objeto e jogar na tela através
do seu atributo 'list' do método getList.

----------------------------------------------------------------//----------------------------------------------------------------

Vamos trabalhar com Facets para isso vamos adicionar xmlns:f="http://java.sun.com/jsf/core para usar recursos
mais avançados.

----------------------------------------------------------------//----------------------------------------------------------------

Mensagem ao usuário

A mensagem vai ser criada através da Classe FacesContext,  nela vai ser chamado o método getCurrentInstance onde poderá adicionar um 
método de message. Dentro desse método vai ser passado dois parâmetros, um deles vai ser a classe FacesMessage, onde em seu construtor 
vai receber três valores que são: (1) Tipo de informação (2) título (3) menssagem.  

Para gerar esse valor na tela vamos utilizar a tag <h:messages> e vamos utilizar dois atributos, (1) showDetail que recebe um valor true
para mostrar a mensagem e (2) showSummary que recebe o valor false para não mostrar o título.

----------------------------------------------------------------//----------------------------------------------------------------

Instalando o PrimeFaces

Site: https://www.primefaces.org/showcase/index.xhtml?jfwid=19bbe

Como startizar (getStarted)
Link: https://www.primefaces.org/showcase/getstarted.xhtml?jfwid=19bbe

Vamos adicionar as dependências do primeFaces, porém vale ressaltar que irei usar a versão 6.2. Também irei usar as 
dependências do apache.commons

Por fim iremos inserir o namespace para poder adicionar os componentes do PrimeFaces
<html xmlns:p="http://primefaces.org/ui">

----------------------------------------------------------------//----------------------------------------------------------------

O atributo render o valor "@form" representa o valor pai da hierarquia de uma árvore, o @form é porque estamos recarregando
o formulario pai do componente. 

----------------------------------------------------------------//----------------------------------------------------------------

Vamos criar uma tela para cadastrar os telefone(s) de usuário. Para isso vamos criar um botão 'telefone' na página index.jsf
que vai redirecionar (action) para a página de cadastro de telefone. Para amarrar ambas as páginas vamos utilizar um código de 
usuário que vai ser passado por um parametro (tag <param> ) para que o managed bean o pegue e consiga fazer essa relação. Ou seja, vale 
ressaltar que vamos associar o telefone do usuario através da chave estrangeira cujo o valor estará ligado com a chave primaria do 
UsuarioPessoa, é assim que iremos associar ambas as entidades. 

  